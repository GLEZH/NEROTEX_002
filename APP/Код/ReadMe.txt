Программа написанна на Qt 5.15.1 с использованием MCVS 2017
1)Всё начинается в main.cpp. Он его главная функция: открытие QML, связь QML с cpp файлами и наоборот.
2)main.qml накладывает слои и соединяет функции.
3)MapView.qml один из двук клавных файлов. В нём происходит создание карты через OSM, создание элементов карты, получение координат с нажатия и меток
Карту создаём самым простым и стандартизированным способом. В карте очень важен плагин, который находится в Tracker.qml.
Ниже видно Connections, Text, MauseArea. Они используются для создания точек на карте. При нажатии на правую кнопку мыши идёт обновление
предметов на карте и если появляется новый элемент, то на карте он появляется. При нажатии вызываются методы ASD.getOldText() и ASD.getOldText2()
класса asd (о котором чуть позже), дальша всё идёт в Connect и дальше работа за asd.h/asd.cpp.
4)Вывод точек в том же MapView.qml. Вернёмся в MauseArea(). Там создаётся элемент круга, что позволяет использовать его как динамический элемент.
5)Вот и добрались до asd.h/asd.cpp. Самы стандартный набор. в public slots стоят слоты для связи с QML. getOldText и  getOldText2 для создания круга. Не много?
Возможно! Но думать об этом времени нет, а на скорость работы сильно не отразится.
6)Метод SetPos(). Там мы обрабатываем данные пользователя и выводим их для оператора. В сумме мы храним 4 переменные на пользователя. Имя, вызываемая служба, категория приоритета
и комментарий к происшествию. Самое интересное. при зажатии кнопки на кружке у нас не только октрывается окно asd, но и передаётся в него информация о позиции нажатияю
А так как все изначальные координаты мы получаем из cpp, то и искать нажатую клавишу будем в нём.
7) Такие файлы как Tracker.qml и др. используются в других функциях, которых в конечном итоге не было необходимости создавать, но они связанны между собой данными,
а время переделывать их нет. Так что теперь это часть кода
8)В коде есть файлы dialog.h/dialog.cpp. Это клиент сервера для получения данных из сетевого пространства. Оно работает, только нужен сервер. Тут не используется,
т.к. демонстрационно легче показывать через текстовые файлы, чем попытаться объяснить работу клиента в надежде, что кто-то поймёт.